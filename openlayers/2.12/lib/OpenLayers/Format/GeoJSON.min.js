OpenLayers.Format.GeoJSON=OpenLayers.Class(OpenLayers.Format.JSON,{ignoreExtraDims:!1,read:function(e,t,i){t=t?t:"FeatureCollection";var n=null,r=null;if(r="string"==typeof e?OpenLayers.Format.JSON.prototype.read.apply(this,[e,i]):e){if("string"!=typeof r.type)OpenLayers.Console.error("Bad GeoJSON - no type: "+e);else if(this.isValidType(r,t))switch(t){case"Geometry":try{n=this.parseGeometry(r)}catch(o){OpenLayers.Console.error(o)}break;case"Feature":try{n=this.parseFeature(r),n.type="Feature"}catch(o){OpenLayers.Console.error(o)}break;case"FeatureCollection":switch(n=[],r.type){case"Feature":try{n.push(this.parseFeature(r))}catch(o){n=null,OpenLayers.Console.error(o)}break;case"FeatureCollection":for(var s=0,a=r.features.length;a>s;++s)try{n.push(this.parseFeature(r.features[s]))}catch(o){n=null,OpenLayers.Console.error(o)}break;default:try{var l=this.parseGeometry(r);n.push(new OpenLayers.Feature.Vector(l))}catch(o){n=null,OpenLayers.Console.error(o)}}}}else OpenLayers.Console.error("Bad JSON: "+e);return n},isValidType:function(e,t){var i=!1;switch(t){case"Geometry":-1==OpenLayers.Util.indexOf(["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","Box","GeometryCollection"],e.type)?OpenLayers.Console.error("Unsupported geometry type: "+e.type):i=!0;break;case"FeatureCollection":i=!0;break;default:e.type==t?i=!0:OpenLayers.Console.error("Cannot convert types from "+e.type+" to "+t)}return i},parseFeature:function(e){var t,i,n,r;n=e.properties?e.properties:{},r=e.geometry&&e.geometry.bbox||e.bbox;try{i=this.parseGeometry(e.geometry)}catch(o){throw o}return t=new OpenLayers.Feature.Vector(i,n),r&&(t.bounds=OpenLayers.Bounds.fromArray(r)),e.id&&(t.fid=e.id),t},parseGeometry:function(e){if(null==e)return null;var t,i=!1;if("GeometryCollection"==e.type){if(!OpenLayers.Util.isArray(e.geometries))throw"GeometryCollection must have geometries array: "+e;for(var n=e.geometries.length,r=Array(n),o=0;n>o;++o)r[o]=this.parseGeometry.apply(this,[e.geometries[o]]);t=new OpenLayers.Geometry.Collection(r),i=!0}else{if(!OpenLayers.Util.isArray(e.coordinates))throw"Geometry must have coordinates array: "+e;if(!this.parseCoords[e.type.toLowerCase()])throw"Unsupported geometry type: "+e.type;try{t=this.parseCoords[e.type.toLowerCase()].apply(this,[e.coordinates])}catch(s){throw s}}return this.internalProjection&&this.externalProjection&&!i&&t.transform(this.externalProjection,this.internalProjection),t},parseCoords:{point:function(e){if(0==this.ignoreExtraDims&&2!=e.length)throw"Only 2D points are supported: "+e;return new OpenLayers.Geometry.Point(e[0],e[1])},multipoint:function(e){for(var t=[],i=null,n=0,r=e.length;r>n;++n){try{i=this.parseCoords.point.apply(this,[e[n]])}catch(o){throw o}t.push(i)}return new OpenLayers.Geometry.MultiPoint(t)},linestring:function(e){for(var t=[],i=null,n=0,r=e.length;r>n;++n){try{i=this.parseCoords.point.apply(this,[e[n]])}catch(o){throw o}t.push(i)}return new OpenLayers.Geometry.LineString(t)},multilinestring:function(e){for(var t=[],i=null,n=0,r=e.length;r>n;++n){try{i=this.parseCoords.linestring.apply(this,[e[n]])}catch(o){throw o}t.push(i)}return new OpenLayers.Geometry.MultiLineString(t)},polygon:function(e){for(var t,i,n=[],r=0,o=e.length;o>r;++r){try{i=this.parseCoords.linestring.apply(this,[e[r]])}catch(s){throw s}t=new OpenLayers.Geometry.LinearRing(i.components),n.push(t)}return new OpenLayers.Geometry.Polygon(n)},multipolygon:function(e){for(var t=[],i=null,n=0,r=e.length;r>n;++n){try{i=this.parseCoords.polygon.apply(this,[e[n]])}catch(o){throw o}t.push(i)}return new OpenLayers.Geometry.MultiPolygon(t)},box:function(e){if(2!=e.length)throw"GeoJSON box coordinates must have 2 elements";return new OpenLayers.Geometry.Polygon([new OpenLayers.Geometry.LinearRing([new OpenLayers.Geometry.Point(e[0][0],e[0][1]),new OpenLayers.Geometry.Point(e[1][0],e[0][1]),new OpenLayers.Geometry.Point(e[1][0],e[1][1]),new OpenLayers.Geometry.Point(e[0][0],e[1][1]),new OpenLayers.Geometry.Point(e[0][0],e[0][1])])])}},write:function(e,t){var i={type:null};if(OpenLayers.Util.isArray(e)){i.type="FeatureCollection";var n=e.length;i.features=Array(n);for(var r=0;n>r;++r){var o=e[r];if(!o instanceof OpenLayers.Feature.Vector){var s="FeatureCollection only supports collections of features: "+o;throw s}i.features[r]=this.extract.feature.apply(this,[o])}}else 0==e.CLASS_NAME.indexOf("OpenLayers.Geometry")?i=this.extract.geometry.apply(this,[e]):e instanceof OpenLayers.Feature.Vector&&(i=this.extract.feature.apply(this,[e]),e.layer&&e.layer.projection&&(i.crs=this.createCRSObject(e)));return OpenLayers.Format.JSON.prototype.write.apply(this,[i,t])},createCRSObject:function(e){var t=""+e.layer.projection,i={};if(t.match(/epsg:/i)){var n=parseInt(t.substring(t.indexOf(":")+1));i=4326==n?{type:"name",properties:{name:"urn:ogc:def:crs:OGC:1.3:CRS84"}}:{type:"name",properties:{name:"EPSG:"+n}}}return i},extract:{feature:function(e){var t=this.extract.geometry.apply(this,[e.geometry]),i={type:"Feature",properties:e.attributes,geometry:t};return null!=e.fid&&(i.id=e.fid),i},geometry:function(e){if(null==e)return null;this.internalProjection&&this.externalProjection&&(e=e.clone(),e.transform(this.internalProjection,this.externalProjection));var t,i=e.CLASS_NAME.split(".")[2],n=this.extract[i.toLowerCase()].apply(this,[e]);return t="Collection"==i?{type:"GeometryCollection",geometries:n}:{type:i,coordinates:n}},point:function(e){return[e.x,e.y]},multipoint:function(e){for(var t=[],i=0,n=e.components.length;n>i;++i)t.push(this.extract.point.apply(this,[e.components[i]]));return t},linestring:function(e){for(var t=[],i=0,n=e.components.length;n>i;++i)t.push(this.extract.point.apply(this,[e.components[i]]));return t},multilinestring:function(e){for(var t=[],i=0,n=e.components.length;n>i;++i)t.push(this.extract.linestring.apply(this,[e.components[i]]));return t},polygon:function(e){for(var t=[],i=0,n=e.components.length;n>i;++i)t.push(this.extract.linestring.apply(this,[e.components[i]]));return t},multipolygon:function(e){for(var t=[],i=0,n=e.components.length;n>i;++i)t.push(this.extract.polygon.apply(this,[e.components[i]]));return t},collection:function(e){for(var t=e.components.length,i=Array(t),n=0;t>n;++n)i[n]=this.extract.geometry.apply(this,[e.components[n]]);return i}},CLASS_NAME:"OpenLayers.Format.GeoJSON"});