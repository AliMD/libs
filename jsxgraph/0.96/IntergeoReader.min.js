/* Version 0.96 */
/* Version 0.96 */
/*
    Copyright 2008-2012
        Matthias Ehmann,
        Michael Gerhaeuser,
        Carsten Miller,
        Bianca Valentin,
        Alfred Wassermann,
        Peter Wilfahrt

    This file is part of JSXGraph.

    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.
    
    You can redistribute it and/or modify it under the terms of the
    
      * GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version
      OR
      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT

    JSXGraph is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License and
    the MIT License along with JSXGraph. If not, see <http://www.gnu.org/licenses/>
    and <http://opensource.org/licenses/MIT/>.
*/
    JXG.IntergeoReader=new function(){this.board=null,this.objects={},this.readIntergeo=function(e,t){this.board=t,this.board.origin={},this.board.origin.usrCoords=[1,0,0],this.board.origin.scrCoords=[1,400,300],this.board.unitX=30,this.board.unitY=30,this.readElements(e.getElementsByTagName("elements")),this.readConstraints(e.getElementsByTagName("constraints")),this.cleanUp(),this.board.fullUpdate(),this.readDisplay(e.getElementsByTagName("display")),this.board.fullUpdate()},this.readElements=function(e){var t;for(var t=0;t<e[0].childNodes.length;t++)(function(t){var n;n=e[0].childNodes[t];if(n.nodeType>1)return;n.nodeName=="point"?JXG.IntergeoReader.storePoint(n):n.nodeName=="line"||n.nodeName=="line_segment"||n.nodeName=="ray"||n.nodeName=="vector"?JXG.IntergeoReader.storeLine(n):n.nodeName=="circle"?JXG.IntergeoReader.storeConic(n):n.nodeName=="conic"?JXG.IntergeoReader.storeConic(n):n.nodeName!="polygon"&&JXG.debug("Not implemented: "+n.nodeName+" "+n.getAttribute("id"))})(t)},this.addPointOld=function(e){var t=0,n=0,r=0,i,s=e.childNodes[t],o=[],u={strokeColor:"red",fillColor:"red",withLabel:!0},a=[];while(s.nodeType>1)t++,s=e.childNodes[t];u.name=e.getAttribute("id");if(s.nodeName=="homogeneous_coordinates"){for(n=0;n<s.childNodes.length;n++)if(s.childNodes[n].nodeType==1)if(s.childNodes[n].nodeName=="double")o.push(s.childNodes[n].firstChild.data);else{if(s.childNodes[n].nodeName!="complex"){JXG.debug("Not implemented: "+s.childNodes[n].nodeName);return}for(r=0;r<s.childNodes[n].childNodes.length;r++)s.childNodes[n].childNodes[r].nodeName=="double"&&o.push(s.childNodes[n].childNodes[r].firstChild.data)}for(n=0;n<o.length;n++)o[n]=parseFloat(o[n]);if(o.length==3)a=[o[2],o[0],o[1]];else{if(!(o.length==6&&Math.abs(o[1])<1e-10&&Math.abs(o[3])<1e-10&&Math.abs(o[5])<1e-10)){JXG.debug("type not supported, yet");return}a=[o[4],o[0],o[2]]}}else if(s.nodeName=="euclidean_coordinates"){for(n=0;n<s.childNodes.length;n++)s.childNodes[n].nodeType==1&&o.push(s.childNodes[n].firstChild.data);for(n=0;n<o.length;n++)o[n]=parseFloat(o[n]);a=[o[0],o[1]]}else{if(s.nodeName!="polar_coordinates"){JXG.debug("This coordinate type is not yet implemented: "+s.nodeName);return}for(n=0;n<s.childNodes.length;n++)s.childNodes[n].nodeType==1&&o.push(s.childNodes[n].firstChild.data);for(n=0;n<o.length;n++)o[n]=parseFloat(o[n]);a=[o[0]*Math.cos(o[1]),o[0]*Math.sin(o[1])]}i=this.board.create("point",a,u),this.objects[e.getAttribute("id")]=i},this.storePoint=function(e){var t=0,n=0,r=0,i=e.childNodes[t],s=[],o=[];while(i.nodeType>1)t++,i=e.childNodes[t];if(i.nodeName=="homogeneous_coordinates"){for(n=0;n<i.childNodes.length;n++)if(i.childNodes[n].nodeType==1)if(i.childNodes[n].nodeName=="double")s.push(i.childNodes[n].firstChild.data);else{if(i.childNodes[n].nodeName!="complex"){JXG.debug("Not implemented: "+i.childNodes[n].nodeName);return}for(r=0;r<i.childNodes[n].childNodes.length;r++)i.childNodes[n].childNodes[r].nodeName=="double"&&s.push(i.childNodes[n].childNodes[r].firstChild.data)}for(n=0;n<s.length;n++)s[n]=parseFloat(s[n]);if(s.length==3)o=[s[2],s[0],s[1]];else{if(!(s.length==6&&Math.abs(s[1])<1e-10&&Math.abs(s[3])<1e-10&&Math.abs(s[5])<1e-10)){JXG.debug("type not supported, yet");return}o=[s[4],s[0],s[2]]}}else if(i.nodeName=="euclidean_coordinates"||i.nodeName=="euclidian_coordinates"){for(n=0;n<i.childNodes.length;n++)i.childNodes[n].nodeType==1&&s.push(i.childNodes[n].firstChild.data);for(n=0;n<s.length;n++)s[n]=parseFloat(s[n]);o=[s[0],s[1]]}else{if(i.nodeName!="polar_coordinates"){JXG.debug("This coordinate type is not yet implemented: "+i.nodeName);return}for(n=0;n<i.childNodes.length;n++)i.childNodes[n].nodeType==1&&s.push(i.childNodes[n].firstChild.data);for(n=0;n<s.length;n++)s[n]=parseFloat(s[n]);o=[s[0]*Math.cos(s[1]),s[0]*Math.sin(s[1])]}this.objects[e.getAttribute("id")]={id:e.getAttribute("id"),coords:null},this.objects[e.getAttribute("id")].coords=o,this.objects[e.getAttribute("id")].id=e.getAttribute("id"),this.objects[e.getAttribute("id")].exists=!1,this.objects[e.getAttribute("id")].i2geoType="point"},this.storeLine=function(e){var t,n,r,i;this.objects[e.getAttribute("id")]={id:e.getAttribute("id"),coords:null},t=0,n=e.childNodes[t];while(n.nodeType>1)t++,n=e.childNodes[t];if(n.nodeName=="homogeneous_coordinates"){r=[];for(i=0;i<n.childNodes.length;i++)n.childNodes[i].nodeType==1&&n.childNodes[i].nodeName=="double"&&r.push(parseFloat(n.childNodes[i].firstChild.data));this.objects[e.getAttribute("id")].coords=r,this.objects[e.getAttribute("id")].id=e.getAttribute("id"),this.objects[e.getAttribute("id")].exists=!1,this.objects[e.getAttribute("id")].i2geoType="line"}},this.storeConic=function(e){var t,n,r,i;this.objects[e.getAttribute("id")]={id:e.getAttribute("id"),coords:null},t=0,r=e.childNodes[t];while(r.nodeType>1)t++,r=e.childNodes[t];if(r.nodeName=="matrix"){i=[];for(n=0;n<r.childNodes.length;n++)r.childNodes[n].nodeType==1&&r.childNodes[n].nodeName=="double"&&i.push(parseFloat(r.childNodes[n].firstChild.data));this.objects[e.getAttribute("id")].coords=i,this.objects[e.getAttribute("id")].id=e.getAttribute("id"),this.objects[e.getAttribute("id")].exists=!1,this.objects[e.getAttribute("id")].i2geoType="conic"}},this.readConstraints=function(e){var t,n;this.board.options.point.strokeColor="blue",this.board.options.point.fillColor="blue";for(t=0;t<e[0].childNodes.length;t++)(function(t){var r;r=e[0].childNodes[t];if(r.nodeType>1)return;r.nodeName=="line_through_two_points"?JXG.IntergeoReader.addLineThroughTwoPoints(r,!1):r.nodeName=="ray_from_point_through_point"?JXG.IntergeoReader.addLineThroughTwoPoints(r,!0):r.nodeName=="line_through_point"?JXG.IntergeoReader.addLineThroughPoint(r):r.nodeName=="line_parallel_to_line_through_point"?JXG.IntergeoReader.addLineParallelToLineThroughPoint(r,!1):r.nodeName=="ray_from_point_and_vector"?JXG.IntergeoReader.addLineParallelToLineThroughPoint(r,!0):r.nodeName=="line_perpendicular_to_line_through_point"?JXG.IntergeoReader.addLinePerpendicularToLineThroughPoint(r):r.nodeName=="line_segment_by_points"?JXG.IntergeoReader.addLineSegmentByTwoPoints(r):r.nodeName=="vector_from_point_to_point"?JXG.IntergeoReader.addVectorFromPointToPoint(r):r.nodeName=="endpoints_of_line_segment"?JXG.IntergeoReader.addEndpointsOfLineSegment(r):r.nodeName!="free_point"&&(r.nodeName=="free_line"?JXG.IntergeoReader.addFreeLine(r):r.nodeName=="point_on_line"?JXG.IntergeoReader.addPointOnLine(r):r.nodeName=="point_on_line_segment"?JXG.IntergeoReader.addPointOnLine(r):r.nodeName=="point_on_circle"?JXG.IntergeoReader.addPointOnCircle(r):r.nodeName=="angular_bisector_of_three_points"?JXG.IntergeoReader.addAngularBisectorOfThreePoints(r,!1):r.nodeName=="angular_bisectors_of_two_lines"?JXG.IntergeoReader.addAngularBisectorsOfTwoLines(r,!1):r.nodeName=="line_angular_bisector_of_three_points"?JXG.IntergeoReader.addAngularBisectorOfThreePoints(r,!0):r.nodeName=="line_angular_bisectors_of_two_lines"?JXG.IntergeoReader.addAngularBisectorsOfTwoLines(r,!0):r.nodeName=="midpoint_of_two_points"?JXG.IntergeoReader.addMidpointOfTwoPoints(r):r.nodeName=="midpoint"?JXG.IntergeoReader.addMidpointOfTwoPoints(r):r.nodeName=="midpoint_of_line_segment"||r.nodeName=="midpoint_line_segment"?JXG.IntergeoReader.addMidpointOfLineSegment(r):r.nodeName=="point_intersection_of_two_lines"?JXG.IntergeoReader.addPointIntersectionOfTwoLines(r):r.nodeName=="locus_defined_by_point"?JXG.IntergeoReader.addLocusDefinedByPoint(r):r.nodeName=="locus_defined_by_point_on_line"?JXG.IntergeoReader.addLocusDefinedByPointOnLine(r):r.nodeName=="locus_defined_by_point_on_line_segment"?JXG.IntergeoReader.addLocusDefinedByPointOnLine(r):r.nodeName=="locus_defined_by_line_through_point"?JXG.IntergeoReader.addLocusDefinedByLineThroughPoint(r):r.nodeName=="locus_defined_by_point_on_circle"?JXG.IntergeoReader.addLocusDefinedByPointOnCircle(r):r.nodeName=="circle_by_three_points"?JXG.IntergeoReader.addCircleByThreePoints(r):r.nodeName=="circle_by_center_and_point"?JXG.IntergeoReader.addCircleByCenterAndPoint(r):r.nodeName=="center_of_circle"?JXG.IntergeoReader.addCenterOfCircle(r):r.nodeName=="intersection_points_of_two_circles"?JXG.IntergeoReader.addIntersectionPointsOfTwoCircles(r):r.nodeName=="intersection_points_of_circle_and_line"?JXG.IntergeoReader.addIntersectionPointsOfCircleAndLine(r):r.nodeName=="other_intersection_point_of_two_circles"?JXG.IntergeoReader.addOtherIntersectionPointOfTwoCircles(r):r.nodeName=="other_intersection_point_of_circle_and_line"?JXG.IntergeoReader.addOtherIntersectionPointOfCircleAndLine(r):r.nodeName=="circle_tangent_lines_by_point"?JXG.IntergeoReader.addCircleTangentLinesByPoint(r):r.nodeName=="polygon_by_vertices"?JXG.IntergeoReader.addPolygonByVertices(r):(n=JXG.IntergeoReader.readParams(r),JXG.debug("readConstraints: not implemented: "+r.nodeName+": "+n[0])))})(t)},this.setAttributes=function(e){e.setProperty({strokecolor:this.board.options.point.strokeColor,fillColor:this.board.options.point.fillColor})},this.readParams=function(e){var t=[],n;for(n=0;n<e.childNodes.length;n++)e.childNodes[n].nodeType==1&&t.push(e.childNodes[n].firstChild.data);return t},this.addPoint=function(e){return e.exists||(e.exists=!0,e=this.board.create("point",e.coords,{name:e.id}),e.setProperty({strokecolor:"red",fillColor:"red"})),e},this.addLine=function(e){var t,n=this.objects[e].coords,r;for(t=0;t<n.length;t++)n[t]=parseFloat(n[t]);r=this.board.create("line",[n[2],n[0],n[1]],{name:e,strokeColor:"black",withLabel:!0}),this.objects[e]=r},this.addConic=function(e){var t;return e.exists||(t=e.coords,e=this.board.create("conic",[t[0],t[4],t[8],t[1],t[5],t[2]],{name:e.id}),e.exists=!0),e},this.cleanUp=function(){var e;for(e in this.objects)this.objects[e].exists==0&&(this.objects[e].i2geoType=="point"?this.addPoint(this.objects[e]):this.objects[e].i2geoType=="line"?this.addLine(this.objects[e]):this.objects[e].i2geoType=="conic"?this.addConic(this.objects[e]):JXG.debug("forgotten: "+this.objects[e].id+" of type "+this.objects[e].i2geoType))},this.addLineThroughTwoPoints=function(e,t){var n=JXG.IntergeoReader.readParams(e),r,i,s;r=this.addPoint(this.objects[n[1]]),i=this.addPoint(this.objects[n[2]]),s=this.board.create("line",[r.id,i.id],{name:n[0],withLabel:!0,straightFirst:!t,straightLast:!0}),this.objects[n[0]]=s,this.objects[n[0]].exists=!0},this.addLineThroughPoint=function(e){var t=JXG.IntergeoReader.readParams(e),n,r=this.objects[t[0]].coords,i=this.addPoint(this.objects[t[1]]),s;for(n=0;n<r.length;n++)r[n]=parseFloat(r[n]);s=this.board.create("line",[function(){return r[2]-r[0]*i.X()-r[1]*i.Y()-r[2]*i.Z()},r[0],r[1]],{name:t[0],strokeColor:"black",withLabel:!0}),this.objects[t[0]]=s,this.objects[t[0]].exists=!0},this.addLineParallelToLineThroughPoint=function(e,t){var n=JXG.IntergeoReader.readParams(e),r,i,s;r=this.addPoint(this.objects[n[1]]),i=this.addPoint(this.objects[n[2]]),s=this.board.create("parallel",[r.id,i.id],{name:n[0],withLabel:!0,straightFirst:!t,straightLast:!0}),this.objects[n[0]]=s,this.objects[n[0]].exists=!0},this.addLinePerpendicularToLineThroughPoint=function(e){var t=JXG.IntergeoReader.readParams(e),n,r,i;n=this.addPoint(this.objects[t[1]]),r=this.addPoint(this.objects[t[2]]),i=this.board.create("perpendicular",[n.id,r.id],{name:t[0],id:t[0],straightFirst:!0,straightLast:!0,point:{name:t[0]+"foot",id:t[0]+"foot"},withLabel:!0}),this.objects[t[0]]=i,this.objects[t[0]].exists=!0},this.addLineSegmentByTwoPoints=function(e){var t=JXG.IntergeoReader.readParams(e),n,r,i;n=this.addPoint(this.objects[t[1]]),r=this.addPoint(this.objects[t[2]]),i=this.board.create("line",[n.id,r.id],{name:t[0],straightFirst:!1,straightLast:!1,strokeColor:"black",withLabel:!0}),this.objects[t[0]]=i,this.objects[t[0]].exists=!0},this.addPointIntersectionOfTwoLines=function(e){var t=JXG.IntergeoReader.readParams(e),n=this.objects[t[1]],r=this.objects[t[2]];this.objects[t[0]]=this.board.create("intersection",[n,r,0],{name:t[0],id:t[0],withLabel:!0}),this.setAttributes(this.objects[t[0]]),this.objects[t[0]].exists=!0},this.addFreeLine=function(e){var t=JXG.IntergeoReader.readParams(e),n=this.objects[t[0]].coords[0],r=this.objects[t[0]].coords[1],i=this.objects[t[0]].coords[2],s=this.board.create("line",[i,n,r],{name:t[0],id:t[0],withLabel:!0});this.objects[t[0]]=s,this.objects[t[0]].exists=!0},this.addPointOnLine=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]),r;r=this.board.create("glider",[0,0,n],{name:t[0],id:t[0],withLabel:!0}),this.objects[t[0]].exists=!0},this.addPointOnCircle=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]),r;n.update(),r=this.board.create("glider",[this.objects[t[0]].coords[1],this.objects[t[0]].coords[2],n],{name:t[0],id:t[0],withLabel:!0}),this.objects[t[0]].exists=!0},this.addEndpointsOfLineSegment=function(e){var t=JXG.IntergeoReader.readParams(e),n=this.objects[t[2]],r=this.addPoint(this.objects[t[0]]),i=this.addPoint(this.objects[t[1]]);r.addConstraint([function(){return n.point1.Z()},function(){return n.point1.X()},function(){return n.point1.Y()}]),i.addConstraint([function(){return n.point2.Z()},function(){return n.point2.X()},function(){return n.point2.Y()}]),this.setAttributes(r),this.setAttributes(i)},this.addAngularBisectorOfThreePoints=function(e,t){var n=JXG.IntergeoReader.readParams(e),r,i,s,o;r=this.addPoint(this.objects[n[1]]),i=this.addPoint(this.objects[n[2]]),s=this.addPoint(this.objects[n[3]]),o=this.board.create("bisector",[r.id,i.id,s.id],{name:n[0],id:n[0],withLabel:!0,straightFirst:t,straightLast:!0,strokeColor:"#000000"}),this.objects[n[0]]=o,this.objects[n[0]].exists=!0},this.addMidpointOfTwoPoints=function(e){var t=JXG.IntergeoReader.readParams(e),n,r,i;n=this.addPoint(this.objects[t[1]]),r=this.addPoint(this.objects[t[2]]),i=this.board.create("midpoint",[n.id,r.id],{name:t[0]}),this.setAttributes(i),this.objects[t[0]].exists=!0},this.addMidpointOfLineSegment=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]);el=this.board.create("midpoint",[n.point1,n.point2],{name:t[0]}),this.setAttributes(el),this.objects[t[0]].exists=!0},this.addCircleByThreePoints=function(e){var t=JXG.IntergeoReader.readParams(e),n=[],r,i;for(r=0;r<3;r++)n[r]=this.addPoint(this.objects[t[r+1]]);i=this.board.create("circumcircle",n,{name:t[0],id:t[0],point:{name:t[0]+"c",id:t[0]+"c"},withLabel:!0}),this.objects[t[0]].exists=!0},this.addCenterOfCircle=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]),r=this.board.create("point",[function(){return n.center.X()},function(){return n.center.Y()}],{name:t[0],id:t[0],withLabel:!0});this.setAttributes(r),this.objects[t[0]].exists=!0},this.addCircleTangentLinesByPoint=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[2]),r=this.addPoint(this.objects[t[3]]),i,s,o,u,a,f;s=this.board.create("line",[function(){return JXG.Math.matVecMult(n.quadraticform,r.coords.usrCoords)[0]},function(){return JXG.Math.matVecMult(n.quadraticform,r.coords.usrCoords)[1]},function(){return JXG.Math.matVecMult(n.quadraticform,r.coords.usrCoords)[2]}],{visible:!1}),o=this.board.create("intersection",[n,s,0],{visible:!1}),u=this.board.create("intersection",[n,s,1],{visible:!1}),a=this.board.create("tangent",[o,n]),f=this.board.create("tangent",[u,n]),this.objects[t[0]]=a,this.objects[t[1]]=f,this.objects[t[0]].exists=!0,this.objects[t[1]].exists=!0},this.addIntersectionPointsOfTwoCircles=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[2]),r=JXG.getReference(this.board,t[3]),i,s;i=this.board.create("intersection",[n,r,0],{name:t[0],id:t[0],withLabel:!0}),s=this.board.create("intersection",[n,r,1],{name:t[1],id:t[1],withLabel:!0}),this.setAttributes(i),this.setAttributes(s),this.objects[t[0]].exists=!0,this.objects[t[1]].exists=!0},this.addIntersectionPointsOfCircleAndLine=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[2]),r=JXG.getReference(this.board,t[3]),i,s;i=this.board.create("intersection",[n,r,0],{name:t[0],id:t[0],withLabel:!0}),s=this.board.create("intersection",[n,r,1],{name:t[1],id:t[1],withLabel:!0}),this.setAttributes(i),this.setAttributes(s),this.objects[t[0]].exists=!0,this.objects[t[1]].exists=!0},this.addCircleByCenterAndPoint=function(e){var t=JXG.IntergeoReader.readParams(e),n=this.addPoint(this.objects[t[1]]),r=this.addPoint(this.objects[t[2]]);el=this.board.create("circle",[n.id,r.id],{name:t[0],id:t[0],withLabel:!0}),this.objects[t[0]].exists=!0},this.addOtherIntersectionPointOfTwoCircles=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[2]),r=JXG.getReference(this.board,t[3]),i=JXG.getReference(this.board,t[1]),s;s=this.board.create("otherintersection",[n,r,i],{name:t[0],id:t[0],withLabel:!0}),this.setAttributes(s),this.objects[t[0]].exists=!0},this.addOtherIntersectionPointOfCircleAndLine=function(e){this.addOtherIntersectionPointOfTwoCircles(e)},this.addAngularBisectorsOfTwoLines=function(e,t){var n=JXG.IntergeoReader.readParams(e),r=this.objects[n[2]],i=this.objects[n[3]],s;s=this.board.create("bisectorlines",[r,i],{line1:{name:n[0],id:n[0],straightFirst:!0,straightLast:!0},line2:{name:n[1],id:n[1],straightFirst:!0,straightLast:!0},withLabel:!0}),this.objects[n[0]].exists=!0,this.objects[n[1]].exists=!0},this.addPolygonByVertices=function(e){var t,n,r=[],i=[],s,o=JXG.IntergeoReader.readParams(e);for(t=0;t<e.childNodes.length;t++)if(e.childNodes[t].nodeType==1&&e.childNodes[t].nodeName=="list_of_vertices"){n=e.childNodes[t],r=JXG.IntergeoReader.readParams(n);break}for(t=0;t<r.length;t++)i.push(this.addPoint(this.objects[r[t]]));s=this.board.create("polygon",i,{name:o[0],id:o[0],withLabel:!0}),this.objects[o[0]].exists=!0},this.addVectorFromPointToPoint=function(e){var t=JXG.IntergeoReader.readParams(e),n,r;n=this.addPoint(this.objects[t[1]]),r=this.addPoint(this.objects[t[2]]),el=this.board.create("arrow",[n.id,r.id],{name:t[0]}),this.setAttributes(el),this.objects[t[0]].exists=!0},this.addLocusDefinedByPoint=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]);n.setProperty({trace:!0}),this.objects[t[1]]=n,this.setAttributes(n)},this.addLocusDefinedByPointOnLine=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]);n.setProperty({trace:!0}),this.objects[t[1]]=n,this.setAttributes(n)},this.addLocusDefinedByLineThroughPoint=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]);n.setProperty({trace:!0}),this.objects[t[1]]=n,this.setAttributes(n)},this.addLocusDefinedByPointOnCircle=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]);n.setProperty({trace:!0}),this.objects[t[1]]=n,this.setAttributes(n)},this.prepareString=function(e){var t=[],n;if(e.indexOf("<")!=0){for(n=0;n<e.length;n++)t[n]=JXG.Util.asciiCharCodeAt(e,n);e=(new JXG.Util.Unzip(t)).unzipFile("construction/intergeo.xml")}return e},this.readDisplay=function(e){var t,n;if(!JXG.exists(e)||!JXG.isArray(e))return;for(t=0;t<e[0].childNodes.length;t++)(function(t){var n,r,i={},s,o;n=e[0].childNodes[t];if(n.nodeType>1)return;if(n.nodeName=="background-color")this.board.containerObj.style.backgroundColor=n.firstChild.data;else if(n.nodeName=="style"){r=JXG.getReference(this.board,n.getAttribute("ref"));var u=[],a;for(a=0;a<n.childNodes.length;a++)n.childNodes[a].nodeType==1&&(s=n.childNodes[a].nodeName,o=n.childNodes[a].firstChild.data,s=="stroke"?s="strokeColor":s=="stroke-width"||s=="border-width"?s="strokeWidth":s=="fill"?s="fillColor":s=="fill-opacity"?s="fillOpacity":s=="border-opacity"?s="strokeOpacity":s=="point-size"?s="size":s=="label"?s="name":s=="point-style"&&(s="face",o=="circle"?o="o":o=="cross"?o="+":o=="x-mark"?o="x":o=="square"?o="[]":o=="triangle"?o="triangleup":o=="point"?o="o":JXG.debug("Display: not implemented"+n.nodeName)),i[s]=o);r.setProperty(i)}else JXG.debug("Display: not implemented"+n.nodeName)})(t)}};
